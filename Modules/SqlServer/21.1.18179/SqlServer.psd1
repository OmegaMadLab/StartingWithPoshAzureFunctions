
#
# Module manifest for module 'SqlServer'
#
# Generated by: Microsoft Corporation
#
#

@{

# Script module or binary module file associated with this manifest.
RootModule = 'SqlServer.psm1'

# Version number of this module.
ModuleVersion = '21.1.18179'

# Supported PSEditions
# CompatiblePSEditions = @('Desktop', 'Core')

# ID used to uniquely identify this module
GUID = '97C3B589-6545-4107-A061-3FE23A4E9195'

# Author of this module
Author = 'Microsoft Corporation'

# Company or vendor of this module
CompanyName = 'Microsoft Corporation'

# Copyright statement for this module
Copyright = 'Copyright (c) 2019 Microsoft. All rights reserved.'

# Description of the functionality provided by this module
Description = @'
This module allows SQL Server developers, administrators and business intelligence professionals to automate database development and server administration, as well as both multidimensional and tabular cube processing.

For Release Notes, expand the Package Details section on this page.

For automation with SSRS & Power BI Report Server, use the ReportingServicesTools module available at https://www.powershellgallery.com/packages/ReportingServicesTools
'@

# Minimum version of the Windows PowerShell engine required by this module
PowerShellVersion = '5.0'

# Minimum version of the Windows PowerShell host required by this module
# PowerShellHostVersion = ''

# Minimum version of Microsoft .NET Framework required by this module. This prerequisite is valid for the PowerShell Desktop edition only.
DotNetFrameworkVersion = '4.0'

# Minimum version of the common language runtime (CLR) required by this module
CLRVersion = '4.0'

# Processor architecture (None, X86, Amd64) required by this module
# Getting rid of the requirement of a 64-bit machine as this leads the module unusable on Linux/mac
# https://github.com/PowerShell/PowerShell/issues/6533
# The only cmdlet that does not work on a 32-bit OS is Invoke-Sqlcmd. Though on a 64-bit OS this cmdlet works as usual.
ProcessorArchitecture = 'None'

# Modules that must be imported into the global environment prior to importing this module
# RequiredModules = @()

# Assemblies that must be loaded prior to importing this module
# RequiredAssemblies = @( )

# Script files (.ps1) that are run in the caller's environment prior to importing this module
# ScriptsToProcess = @()

# The type and format files are loaded explicitly in the SqlServer.psm1 file as these elements aren't supported on PS Core on linux/mac.
# Type files (.ps1xml) to be loaded when importing this module
# TypesToProcess = 'sqlprovider.types.ps1xml'

# Format files (.ps1xml) to be loaded when importing this module
# FormatsToProcess = 'sqlprovider.format.ps1xml'

# Modules to import as nested modules of the module specified in RootModule/ModuleToProcess
NestedModules = @('sqlnotebook.psm1')

# Functions to export from this module
FunctionsToExport = @(
    'Invoke-SqlNotebook',
    'SQLSERVER:' )

# Cmdlets to export from this module
CmdletsToExport = @(
    'Add-RoleMember',
    'Add-SqlAvailabilityDatabase',
    'Add-SqlAvailabilityGroupListenerStaticIp',
    'Add-SqlAzureAuthenticationContext',
    'Add-SqlColumnEncryptionKeyValue',
    'Add-SqlFirewallRule',
    'Add-SqlLogin',
    'Backup-ASDatabase',
    'Backup-SqlDatabase',
    'Complete-SqlColumnMasterKeyRotation',
    'ConvertFrom-EncodedSqlName',
    'ConvertTo-EncodedSqlName',
    'Convert-UrnToPath',
    'Disable-SqlAlwaysOn',
    'Enable-SqlAlwaysOn',
    'Export-SqlVulnerabilityAssessmentBaselineSet',
    'Export-SqlVulnerabilityAssessmentScan',
    'Get-SqlAgent',
    'Get-SqlAgentJob',
    'Get-SqlAgentJobHistory',
    'Get-SqlAgentJobSchedule',
    'Get-SqlAgentJobStep',
    'Get-SqlAgentSchedule',
    'Get-SqlAssessmentItem',
    'Get-SqlBackupHistory',
    'Get-SqlColumnEncryptionKey',
    'Get-SqlColumnMasterKey',
    'Get-SqlCredential',
    'Get-SqlDatabase',
    'Get-SqlErrorLog',
    'Get-SqlInstance',
    'Get-SqlLogin',
    'Get-SqlSensitivityClassification',
    'Get-SqlSensitivityRecommendations',
    'Get-SqlSmartAdmin',
    'Grant-SqlAvailabilityGroupCreateAnyDatabase',
    'Invoke-SqlAssessment',
    'Import-SqlVulnerabilityAssessmentBaselineSet',
    'Invoke-ASCmd',
    'Invoke-PolicyEvaluation',
    'Invoke-ProcessASDatabase',
    'Invoke-ProcessCube',
    'Invoke-ProcessDimension',
    'Invoke-ProcessPartition',
    'Invoke-ProcessTable',
    'Invoke-Sqlcmd',
    'Invoke-SqlColumnMasterKeyRotation',
    'Invoke-SqlVulnerabilityAssessmentScan',
    'Join-SqlAvailabilityGroup',
    'Merge-Partition',
    'New-RestoreFolder',
    'New-RestoreLocation',
    'New-SqlAvailabilityGroup',
    'New-SqlAvailabilityGroupListener',
    'New-SqlAvailabilityReplica',
    'New-SqlAzureKeyVaultColumnMasterKeySettings',
    'New-SqlBackupEncryptionOption',
    'New-SqlCertificateStoreColumnMasterKeySettings',
    'New-SqlCngColumnMasterKeySettings',
    'New-SqlColumnEncryptionKey',
    'New-SqlColumnEncryptionKeyEncryptedValue',
    'New-SqlColumnEncryptionSettings',
    'New-SqlColumnMasterKey',
    'New-SqlColumnMasterKeySettings',
    'New-SqlCredential',
    'New-SqlCspColumnMasterKeySettings',
    'New-SqlHADREndpoint',
    'New-SqlVulnerabilityAssessmentBaseline',
    'New-SqlVulnerabilityAssessmentBaselineSet',
    'Read-SqlTableData',
    'Read-SqlViewData',
    'Read-SqlXEvent',
    'Remove-RoleMember',
    'Remove-SqlAvailabilityDatabase',
    'Remove-SqlAvailabilityGroup',
    'Remove-SqlAvailabilityReplica',
    'Remove-SqlColumnEncryptionKey',
    'Remove-SqlColumnEncryptionKeyValue',
    'Remove-SqlColumnMasterKey',
    'Remove-SqlCredential',
    'Remove-SqlFirewallRule',
    'Remove-SqlLogin',
    'Remove-SqlSensitivityClassification',
    'Restore-ASDatabase',
    'Restore-SqlDatabase',
    'Resume-SqlAvailabilityDatabase',
    'Revoke-SqlAvailabilityGroupCreateAnyDatabase',
    'Save-SqlMigrationReport',
    'Set-SqlAuthenticationMode',
    'Set-SqlAvailabilityGroup',
    'Set-SqlAvailabilityGroupListener',
    'Set-SqlAvailabilityReplica',
    'Set-SqlAvailabilityReplicaRoleToSecondary',
    'Set-SqlColumnEncryption',
    'Set-SqlCredential',
    'Set-SqlErrorLog',
    'Set-SqlHADREndpoint',
    'Set-SqlNetworkConfiguration',
    'Set-SqlSensitivityClassification',
    'Set-SqlSmartAdmin',
    'Start-SqlInstance',
    'Stop-SqlInstance',
    'Suspend-SqlAvailabilityDatabase',
    'Switch-SqlAvailabilityGroup',
    'Test-SqlAvailabilityGroup',
    'Test-SqlAvailabilityReplica',
    'Test-SqlDatabaseReplicaState',
    'Test-SqlSmartAdmin',
    'Write-SqlTableData' )

# Variables to export from this module
# VariablesToExport = @()

# Aliases to export from this module
AliasesToExport = @('Decode-SqlName', 'Encode-SqlName')

# DSC resources to export from this module
# DscResourcesToExport = @()

# List of all modules packaged with this module
# ModuleList = @()

# List of all files packaged with this module
# FileList = @()

# Private data to pass to the module specified in RootModule/ModuleToProcess. This may also contain a PSData hashtable with additional module metadata used by PowerShell.
PrivateData = @{

    PSData = @{


        # Tags applied to this module. These help with module discovery in online galleries.
        Tags = 'SQL', 'SqlServer', 'SQLPS', 'Databases', 'SqlAgent', 'Jobs', 'SSAS', 'AnalysisServices', 'Tabular', 'Cubes', 'SSIS', 'ExtendedEvents', 'xEvents', 'VulnerabilityAssessment', 'DataClassification'

        # A URL to the license for this module.
        LicenseUri = 'https://docs.microsoft.com/sql/relational-databases/scripting/sql-server-powershell-license-terms'

        # A URL to the main website for this project.
        # ProjectUri = ''

        # A URL to an icon representing this module.
        IconUri = 'https://go.microsoft.com/fwlink/?linkid=842808'

        # ReleaseNotes of this module
        ReleaseNotes = @'
## 21.1.18179
Fixes:
* Fixed an issue that was causing the Microsoft.SqlServer.Assessment.format.ps1xml 
  not to load on case-sensitive filesystems (e.g. Linux)
* Removed size limitation for the scan log in Invoke-SqlVulnerabilityAssessmentScan. 
* Fixed an issue where New-SqlAzureKeyVaultColumnMasterKeySettings, in conjunction with the 
  -AllowEnclaveComputations parameter, would open an interactive Azure Authentication dialog 
  even after the user had invoked the Add-SqlAzureAuthenticationContext cmdlet.

Updates:
* Added new cmdlet Invoke-SqlNotebook to execute SQL Notebooks.
* Minimum required PowerShell Core is 6.2.1
* Updated Invoke-SqlAssessment and Get-SqlAssessmentItem cmdlets. 
  Added support for Azure SQL Database Managed Instance. 
  Added new checks. Added a new option -FlattenOutput. 
  Refer to examples in help for more details.

## 21.1.18147
Fixes:
* Fixed an issue where Invoke-AsCmd with Verbose logging turned on would log 
  the password in the connection string in plain text.  

Updates:
* Added cmdlets Get-SqlAssessmentItem and Invoke-SqlAssessment to work with SQL Assessment API. 
  This solution is a new way to assess your SQL Server instances using Best Practices 
  provided by SQL Server Team with an ability to customize the default set of checks. 
  SQL Assessment API and the cmdlets are in preview, hence subject to change in a future 
  version of the module. 

## 21.1.18135
Fixes:
* Fixed an issue where Invoke-SqlCmd on PS6 was not accepting "!!if" (it was 
  incorrectly requiring a "!! if")
* Fixed an issue in Invoke-Sqlcmd which was not honoring the -QueryTimeout, as 
  per documentation: default value is 0, which means no timeout for the query.
* Fixed an issue Invoke-SqlCmd does not allow using relative paths when 
  including (:r) files.
* Added the -LockTimeoutInSeconds parameter to the Set-SqlColumnEncryption cmdlet which allows 
  the caller to set the maximum time that a statement waits on a blocked resource in SQL Server.
* Fixed an issue in the SQLAS provider where an "Encountered an invalid type for a default value"
  error was thrown while trying to enumerate tables of a Tabular cube.
* Fixed an issue in Write-SqlTableData where it was not possible to specify "no timeout" for the
  write operation. Now, a value "-Timeout 0" allows that. Also, the added validation on the
  value passed to the parameter (must be in [0,65535]).

Updates:
* Added new cmdlet Read-SqlXEvent to reads SQL Server XEvents from a file or
  live SQL XEvent session (used to be in the SqlServer.XEvent module)

## 21.1.18121
Fixes:
* Fixed in issue in Set-SqlColumnEncryption where the cmdlet was failing
  to encrypt columns in a table that was not within the default schema.
* Minor fixes to Invoke-Sqlcmd for PowerShell 6.x (better parity with PowerShell 5.x)
* Fixed Null Reference Exception in Invoke-Sqlcmd when the script had multiple
  blanks after the last GO

Note: this version of the module will be the last on to support PowerShell 6.1. After that,
      PowerShell 6.2 will be required.

## 21.1.18102
Updates:
* Added support for Vulnerability Assessment cmdlets on SQL Data Warehouse databases.
* Added support for "Registered Servers" on .Net Core in SQL provider (SQLSERVER:\SQLRegistration)
* Initial support for Invoke-Sqlcmd on .Net Core (-DisableCommand not supported yet). Not all sqlcmd command supported
  on PS5 are available yet. Requires PowerShell 6.2+.
* Ported Restore-SqlDatabase cmdlet to .Net Core.
* Added new parameter -AutoRelocateFile to Restore-SqlDatabase cmdlet. When this parameter is used,
  all the logical files in the backup (for whch there is no explicit relocation requested via the -RelocateFile)
  are going to be relocated using the server defaults paths.
* Updated the display format of SMO Server objects (e.g. what you see when invoking
  Get-SqlInstance) to present both the HostPlatform and the HostDistribution properties.

## 21.1.18080
Fixes:
* Fixed "format" of the "Machine" object emitted when doing "dir SQLSERVER:\SQL"

Updates:
* Updated "format" for SSAS database objects to display the
  "Estimated Size" and "Last Processed" properties.
* Added support for Vulnerability Assessment cmdlets for SQL Database Managed Instance.
* Added Data Classification cmdlets:
    Get-SqlSensitivityClassification
    Get-SqlSensitivityRecommendations
    Remove-SqlSensitivityClassification
    Set-SqlSensitivityClassification

## 21.1.18068
Fixes:
* Fixed Invoke-SqlCmd cmdlet to report useful information like Msg, Level, State,
  Procedure, and Line when SQL Exceptions happens.
* Fixed some issues with Invoke-SqlVulnerabilityAssessmentScan

Updates:
* Upgraded SMO dependencies to version 15.100.0.0, hence the minor version change
  to 21.1.
* Included Microsoft.SqlServer.ConnectionInfoExtended.dll as part of the module.
* Updated Always Encrypted cmdlets to support enclave computations.
* Updated offline documentation for some cmdlets.
* Updated the display format of SMO Server objects (e.g. what you see when invoking
  Get-SqlInstance) to present both the ProductLevel and the ProductUpdateLevel properties.
  Note: the ProductUpdateLevel property on the SMO object is aliased to "UpdateLevel".

## 21.0.17279
Fixes:
* Fixed issue in Invoke-ProcessASdatabase which was throwing an exception when
  processing large tables.

Updates:
* Name parameter on Get-SqlDatabase has been aliased as Database.
* Added -ErrorLogSizeKb parameter to Set-SqlErrorLog cmdlet.

## 21.0.17262
Fixes:
* Added StatementTimeout parameter in Backup-SqlDatabase cmdlet with default
  as 0 (no timeout). This fixes the case where Backup operations running longer
  than 10 mins used to timeout.
* Fixed issue with Always Encrypted cmdlets, where NewtonSoft.Json assembly did
  not load.
* Fixed the issue where Instance name was showing up as empty string on directly
  creating a SMO.Server object after SqlServer module is imported.

Updates:
* Updated Get-SqlInstance cmdlet. This cmdlet now utilizes SMO and supports
  all server instances exposed via SMO.
  This cmdlet is now supported on PowerShell 6 as well
* Important: Get-SqlInstance no longer uses CloudAdapter for Sql IaaS instances
  as CloudAdapter stopped shipping from SQL 2016 onwards.
  Users that still use this cmdlet for Sql 2014 IaaS instances
  should revert to an older version of the SqlServer module.
* Added the following Vulnerability Assessment cmdlets:
    Export-SqlVulnerabilityAssessmentBaselineSet
    Export-SqlVulnerabilityAssessmentScan
    Import-SqlVulnerabilityAssessmentBaselineSet
    Invoke-SqlVulnerabilityAssessmentScan
    New-SqlVulnerabilityAssessmentBaseline
    New-SqlVulnerabilityAssessmentBaselineSet

## 21.0.17240
Fixes:
* Fixed issue where PowerShell was not able to find cmdlets in the module
  unless the user did an explicit ''Import-Module SQLServer''

Updates:
* Support using Service Principal Name to connect Azure Analysis Services
* Added Get-SqlBackupHistory cmdlet
* Ported PS Provider to .NET Core for PowerShell 6 support
* Ported a subset of cmdlets to .NET Core for PowerShell 6 support
* Powershell 6 support on macOS and Linux in Preview.
* To use SqlServer provider on macOS and Linux mount it using a new PSDrive.
  Examples in documentation.
* Removed restriction of 64-bit OS for this module. Note: Invoke-Sqlcmd
  cmdlet is the only cmdlet not supported on 32-bit OS.

## 21.0.17224
Fixes:
* Added logic to prevent the module from being installed on PowerShell Core
* Fixed SqlServer Provider for SSIS

Updates:
* Added support for PSCredential to Invoke-Sqlcmd

## 21.0.17199
Fixes:
* Fixed issue in New-SqlAvailabilityGroup cmdlet when targeting SQL Server 2014

Updates:
* Updated SQL Server provider (SQLRegistration) to display AS/IS/RS groups
* Added -LoadBalancedReadOnlyRoutingList parameter to Set-SqlAvailabilityReplica
  and New-SqlAvailabilityReplica

## 21.0.17178
Updates:
* Updated AnalysisService Cmdlet to use cached login token from Login-AzureAsAccount for Azure Analysis Services.
* Update Backup-ASDatabase and Restore-ASDatabase to support Azure Analysis Services.

## 21.0.17152
Bug Fixes:
* Fixed issue where Invoke-SqlCmd was throwing an error due to
  missing MSVCR120.dll (now included with the module).
* Fixed issue where 'Deploy to Azure Automation' was not working.
* Fixed issue where the SQL Provider was unable to enumerate some containers
  (e.g. Databases) when the module was loaded by passing Import-Module any
  of the -Version/-MinimumVersion/-MaximumVersion parameters.
* Fixed issue in Set-SqlColumnEncryption where the -LogFileDirectory option
  was not dumping DacFx logs.
* Updated Tags and Description in the manifest file.
* Updated link to License.

Updates:
* Added new parameter '-CertificateThumbprint' to Add-SqlAzureAuthenticationContext
  cmdlet.

## 21.0.17099
First version of SQL PowerShell Module on PSGallery.

'@

        # External dependent modules of this module
        # ExternalModuleDependencies = ''

    } # End of PSData hashtable

 } # End of PrivateData hashtable

# HelpInfo URI of this module
# HelpInfoURI = ''

# Default prefix for commands exported from this module. Override the default prefix using Import-Module -Prefix.
# DefaultCommandPrefix = ''
}

# SIG # Begin signature block
# MIIjsgYJKoZIhvcNAQcCoIIjozCCI58CAQExDzANBglghkgBZQMEAgEFADB5Bgor
# BgEEAYI3AgEEoGswaTA0BgorBgEEAYI3AgEeMCYCAwEAAAQQH8w7YFlLCE63JNLG
# KX7zUQIBAAIBAAIBAAIBAAIBADAxMA0GCWCGSAFlAwQCAQUABCArxB31K/PwG+I2
# 2GojCoj4EzMrQ1tkoeTaoQlTCmxDu6CCDYUwggYDMIID66ADAgECAhMzAAABUptA
# n1BWmXWIAAAAAAFSMA0GCSqGSIb3DQEBCwUAMH4xCzAJBgNVBAYTAlVTMRMwEQYD
# VQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRtb25kMR4wHAYDVQQKExVNaWNy
# b3NvZnQgQ29ycG9yYXRpb24xKDAmBgNVBAMTH01pY3Jvc29mdCBDb2RlIFNpZ25p
# bmcgUENBIDIwMTEwHhcNMTkwNTAyMjEzNzQ2WhcNMjAwNTAyMjEzNzQ2WjB0MQsw
# CQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9u
# ZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMR4wHAYDVQQDExVNaWNy
# b3NvZnQgQ29ycG9yYXRpb24wggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIB
# AQCxp4nT9qfu9O10iJyewYXHlN+WEh79Noor9nhM6enUNbCbhX9vS+8c/3eIVazS
# YnVBTqLzW7xWN1bCcItDbsEzKEE2BswSun7J9xCaLwcGHKFr+qWUlz7hh9RcmjYS
# kOGNybOfrgj3sm0DStoK8ljwEyUVeRfMHx9E/7Ca/OEq2cXBT3L0fVnlEkfal310
# EFCLDo2BrE35NGRjG+/nnZiqKqEh5lWNk33JV8/I0fIcUKrLEmUGrv0CgC7w2cjm
# bBhBIJ+0KzSnSWingXol/3iUdBBy4QQNH767kYGunJeY08RjHMIgjJCdAoEM+2mX
# v1phaV7j+M3dNzZ/cdsz3oDfAgMBAAGjggGCMIIBfjAfBgNVHSUEGDAWBgorBgEE
# AYI3TAgBBggrBgEFBQcDAzAdBgNVHQ4EFgQU3f8Aw1sW72WcJ2bo/QSYGzVrRYcw
# VAYDVR0RBE0wS6RJMEcxLTArBgNVBAsTJE1pY3Jvc29mdCBJcmVsYW5kIE9wZXJh
# dGlvbnMgTGltaXRlZDEWMBQGA1UEBRMNMjMwMDEyKzQ1NDEzNjAfBgNVHSMEGDAW
# gBRIbmTlUAXTgqoXNzcitW2oynUClTBUBgNVHR8ETTBLMEmgR6BFhkNodHRwOi8v
# d3d3Lm1pY3Jvc29mdC5jb20vcGtpb3BzL2NybC9NaWNDb2RTaWdQQ0EyMDExXzIw
# MTEtMDctMDguY3JsMGEGCCsGAQUFBwEBBFUwUzBRBggrBgEFBQcwAoZFaHR0cDov
# L3d3dy5taWNyb3NvZnQuY29tL3BraW9wcy9jZXJ0cy9NaWNDb2RTaWdQQ0EyMDEx
# XzIwMTEtMDctMDguY3J0MAwGA1UdEwEB/wQCMAAwDQYJKoZIhvcNAQELBQADggIB
# AJTwROaHvogXgixWjyjvLfiRgqI2QK8GoG23eqAgNjX7V/WdUWBbs0aIC3k49cd0
# zdq+JJImixcX6UOTpz2LZPFSh23l0/Mo35wG7JXUxgO0U+5drbQht5xoMl1n7/TQ
# 4iKcmAYSAPxTq5lFnoV2+fAeljVA7O43szjs7LR09D0wFHwzZco/iE8Hlakl23ZT
# 7FnB5AfU2hwfv87y3q3a5qFiugSykILpK0/vqnlEVB0KAdQVzYULQ/U4eFEjnis3
# Js9UrAvtIhIs26445Rj3UP6U4GgOjgQonlRA+mDlsh78wFSGbASIvK+fkONUhvj8
# B8ZHNn4TFfnct+a0ZueY4f6aRPxr8beNSUKn7QW/FQmn422bE7KfnqWncsH7vbNh
# G929prVHPsaa7J22i9wyHj7m0oATXJ+YjfyoEAtd5/NyIYaE4Uu0j1EhuYUo5VaJ
# JnMaTER0qX8+/YZRWrFN/heps41XNVjiAawpbAa0fUa3R9RNBjPiBnM0gvNPorM4
# dsV2VJ8GluIQOrJlOvuCrOYDGirGnadOmQ21wPBoGFCWpK56PxzliKsy5NNmAXcE
# x7Qb9vUjY1WlYtrdwOXTpxN4slzIht69BaZlLIjLVWwqIfuNrhHKNDM9K+v7vgrI
# bf7l5/665g0gjQCDCN6Q5sxuttTAEKtJeS/pkpI+DbZ/MIIHejCCBWKgAwIBAgIK
# YQ6Q0gAAAAAAAzANBgkqhkiG9w0BAQsFADCBiDELMAkGA1UEBhMCVVMxEzARBgNV
# BAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jv
# c29mdCBDb3Jwb3JhdGlvbjEyMDAGA1UEAxMpTWljcm9zb2Z0IFJvb3QgQ2VydGlm
# aWNhdGUgQXV0aG9yaXR5IDIwMTEwHhcNMTEwNzA4MjA1OTA5WhcNMjYwNzA4MjEw
# OTA5WjB+MQswCQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UE
# BxMHUmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMSgwJgYD
# VQQDEx9NaWNyb3NvZnQgQ29kZSBTaWduaW5nIFBDQSAyMDExMIICIjANBgkqhkiG
# 9w0BAQEFAAOCAg8AMIICCgKCAgEAq/D6chAcLq3YbqqCEE00uvK2WCGfQhsqa+la
# UKq4BjgaBEm6f8MMHt03a8YS2AvwOMKZBrDIOdUBFDFC04kNeWSHfpRgJGyvnkmc
# 6Whe0t+bU7IKLMOv2akrrnoJr9eWWcpgGgXpZnboMlImEi/nqwhQz7NEt13YxC4D
# dato88tt8zpcoRb0RrrgOGSsbmQ1eKagYw8t00CT+OPeBw3VXHmlSSnnDb6gE3e+
# lD3v++MrWhAfTVYoonpy4BI6t0le2O3tQ5GD2Xuye4Yb2T6xjF3oiU+EGvKhL1nk
# kDstrjNYxbc+/jLTswM9sbKvkjh+0p2ALPVOVpEhNSXDOW5kf1O6nA+tGSOEy/S6
# A4aN91/w0FK/jJSHvMAhdCVfGCi2zCcoOCWYOUo2z3yxkq4cI6epZuxhH2rhKEmd
# X4jiJV3TIUs+UsS1Vz8kA/DRelsv1SPjcF0PUUZ3s/gA4bysAoJf28AVs70b1FVL
# 5zmhD+kjSbwYuER8ReTBw3J64HLnJN+/RpnF78IcV9uDjexNSTCnq47f7Fufr/zd
# sGbiwZeBe+3W7UvnSSmnEyimp31ngOaKYnhfsi+E11ecXL93KCjx7W3DKI8sj0A3
# T8HhhUSJxAlMxdSlQy90lfdu+HggWCwTXWCVmj5PM4TasIgX3p5O9JawvEagbJjS
# 4NaIjAsCAwEAAaOCAe0wggHpMBAGCSsGAQQBgjcVAQQDAgEAMB0GA1UdDgQWBBRI
# bmTlUAXTgqoXNzcitW2oynUClTAZBgkrBgEEAYI3FAIEDB4KAFMAdQBiAEMAQTAL
# BgNVHQ8EBAMCAYYwDwYDVR0TAQH/BAUwAwEB/zAfBgNVHSMEGDAWgBRyLToCMZBD
# uRQFTuHqp8cx0SOJNDBaBgNVHR8EUzBRME+gTaBLhklodHRwOi8vY3JsLm1pY3Jv
# c29mdC5jb20vcGtpL2NybC9wcm9kdWN0cy9NaWNSb29DZXJBdXQyMDExXzIwMTFf
# MDNfMjIuY3JsMF4GCCsGAQUFBwEBBFIwUDBOBggrBgEFBQcwAoZCaHR0cDovL3d3
# dy5taWNyb3NvZnQuY29tL3BraS9jZXJ0cy9NaWNSb29DZXJBdXQyMDExXzIwMTFf
# MDNfMjIuY3J0MIGfBgNVHSAEgZcwgZQwgZEGCSsGAQQBgjcuAzCBgzA/BggrBgEF
# BQcCARYzaHR0cDovL3d3dy5taWNyb3NvZnQuY29tL3BraW9wcy9kb2NzL3ByaW1h
# cnljcHMuaHRtMEAGCCsGAQUFBwICMDQeMiAdAEwAZQBnAGEAbABfAHAAbwBsAGkA
# YwB5AF8AcwB0AGEAdABlAG0AZQBuAHQALiAdMA0GCSqGSIb3DQEBCwUAA4ICAQBn
# 8oalmOBUeRou09h0ZyKbC5YR4WOSmUKWfdJ5DJDBZV8uLD74w3LRbYP+vj/oCso7
# v0epo/Np22O/IjWll11lhJB9i0ZQVdgMknzSGksc8zxCi1LQsP1r4z4HLimb5j0b
# pdS1HXeUOeLpZMlEPXh6I/MTfaaQdION9MsmAkYqwooQu6SpBQyb7Wj6aC6VoCo/
# KmtYSWMfCWluWpiW5IP0wI/zRive/DvQvTXvbiWu5a8n7dDd8w6vmSiXmE0OPQvy
# CInWH8MyGOLwxS3OW560STkKxgrCxq2u5bLZ2xWIUUVYODJxJxp/sfQn+N4sOiBp
# mLJZiWhub6e3dMNABQamASooPoI/E01mC8CzTfXhj38cbxV9Rad25UAqZaPDXVJi
# hsMdYzaXht/a8/jyFqGaJ+HNpZfQ7l1jQeNbB5yHPgZ3BtEGsXUfFL5hYbXw3MYb
# BL7fQccOKO7eZS/sl/ahXJbYANahRr1Z85elCUtIEJmAH9AAKcWxm6U/RXceNcbS
# oqKfenoi+kiVH6v7RyOA9Z74v2u3S5fi63V4GuzqN5l5GEv/1rMjaHXmr/r8i+sL
# gOppO6/8MO0ETI7f33VtY5E90Z1WTk+/gFcioXgRMiF670EKsT/7qMykXcGhiJtX
# cVZOSEXAQsmbdlsKgEhr/Xmfwb1tbWrJUnMTDXpQzTGCFYMwghV/AgEBMIGVMH4x
# CzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRt
# b25kMR4wHAYDVQQKExVNaWNyb3NvZnQgQ29ycG9yYXRpb24xKDAmBgNVBAMTH01p
# Y3Jvc29mdCBDb2RlIFNpZ25pbmcgUENBIDIwMTECEzMAAAFSm0CfUFaZdYgAAAAA
# AVIwDQYJYIZIAWUDBAIBBQCggdowGQYJKoZIhvcNAQkDMQwGCisGAQQBgjcCAQQw
# HAYKKwYBBAGCNwIBCzEOMAwGCisGAQQBgjcCARUwLwYJKoZIhvcNAQkEMSIEIOgN
# P0QzY8xlPM7TdToL8iZr6Dxzwx/oGpQXPrICuxHEMG4GCisGAQQBgjcCAQwxYDBe
# oDqAOABTAFEATAAgAFMAZQByAHYAZQByACAATQBhAG4AYQBnAGUAbQBlAG4AdAAg
# AFMAdAB1AGQAaQBvoSCAHmh0dHA6Ly93d3cubWljcm9zb2Z0LmNvbS9zcWwvIDAN
# BgkqhkiG9w0BAQEFAASCAQA2ALhvVYeZYodLQV7PysP/gFD8Xsz+yTetBoPJEyRO
# tw17v0APzny0w0YLOvBQEfz22m25oL3Jl5iyAikvr01QShTKTLnuLHyf33aJ0Nys
# Ohv37jONz18R1+ayqQsNU+2jYgfpJPhiOuXZQ6SjQ4FrLN3nfdL0zJmO+2eR7NLu
# dCPD8sJNJKdmh3j6Gl4KuSkqNPr4npVJnksTm9tVZIUGHflUxIamzwTm3ME2B6xs
# CV8OC0BRRglyXueDU4uGK/3Z27HMp4ry8RBAuhATnye0eITwrk6Y6DhPNrC5exlT
# 0RTabiRw5jt9BWWNd4uYzivmDvUtPcct9lTAt7/AFvumoYIS4TCCEt0GCisGAQQB
# gjcDAwExghLNMIISyQYJKoZIhvcNAQcCoIISujCCErYCAQMxDzANBglghkgBZQME
# AgEFADCCAVEGCyqGSIb3DQEJEAEEoIIBQASCATwwggE4AgEBBgorBgEEAYRZCgMB
# MDEwDQYJYIZIAWUDBAIBBQAEIMfgIvTlBTx5nug3QBlNdYN4TvVVSsIvKffXgQ0r
# 1YsaAgZdX/LtbtkYEzIwMTkwOTIwMjEyMjUwLjk3NVowBIACAfSggdCkgc0wgcox
# CzAJBgNVBAYTAlVTMQswCQYDVQQIEwJXQTEQMA4GA1UEBxMHUmVkbW9uZDEeMBwG
# A1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMS0wKwYDVQQLEyRNaWNyb3NvZnQg
# SXJlbGFuZCBPcGVyYXRpb25zIExpbWl0ZWQxJjAkBgNVBAsTHVRoYWxlcyBUU1Mg
# RVNOOkEyNDAtNEI4Mi0xMzBFMSUwIwYDVQQDExxNaWNyb3NvZnQgVGltZS1TdGFt
# cCBzZXJ2aWNloIIOODCCBPEwggPZoAMCAQICEzMAAADgship1NHCtPcAAAAAAOAw
# DQYJKoZIhvcNAQELBQAwfDELMAkGA1UEBhMCVVMxEzARBgNVBAgTCldhc2hpbmd0
# b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3Jh
# dGlvbjEmMCQGA1UEAxMdTWljcm9zb2Z0IFRpbWUtU3RhbXAgUENBIDIwMTAwHhcN
# MTgwODIzMjAyNzAxWhcNMTkxMTIzMjAyNzAxWjCByjELMAkGA1UEBhMCVVMxCzAJ
# BgNVBAgTAldBMRAwDgYDVQQHEwdSZWRtb25kMR4wHAYDVQQKExVNaWNyb3NvZnQg
# Q29ycG9yYXRpb24xLTArBgNVBAsTJE1pY3Jvc29mdCBJcmVsYW5kIE9wZXJhdGlv
# bnMgTGltaXRlZDEmMCQGA1UECxMdVGhhbGVzIFRTUyBFU046QTI0MC00QjgyLTEz
# MEUxJTAjBgNVBAMTHE1pY3Jvc29mdCBUaW1lLVN0YW1wIHNlcnZpY2UwggEiMA0G
# CSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDCl/hnDsembJx7FMS5RuaJsiQJDP0t
# iqyeCettiNlGcNoa428oVtblH6yZatCXZygyhzbnDJofTHIGtdiEzQc5fPhddfTd
# 4hEQgd5ch/BlGITXFEwJ4d/GhHZQ1hbLdiBT/j67Qx15VeuXy5n/jM9PvIbBksSW
# wX8vrkhRT/rqa1xWrmF+SfcYKw+pC+d3tUHrgACo0YaVHuS3jlpXg33A+pul8wib
# ZBcGxMF1CqwlP0AfMW60Dp4qm/JLbWxdx/pOiiOrM/tykFDtEnN07HXRjXDhDhfI
# eBCz4GPiCEFk94AaFxysFeFn9vyz7TyKJxUksXJhtWGq2i4WmPcphyDzAgMBAAGj
# ggEbMIIBFzAdBgNVHQ4EFgQUa0HTCrY5zqzv/p44rWuSbXaAh+gwHwYDVR0jBBgw
# FoAU1WM6XIoxkPNDe3xGG8UzaFqFbVUwVgYDVR0fBE8wTTBLoEmgR4ZFaHR0cDov
# L2NybC5taWNyb3NvZnQuY29tL3BraS9jcmwvcHJvZHVjdHMvTWljVGltU3RhUENB
# XzIwMTAtMDctMDEuY3JsMFoGCCsGAQUFBwEBBE4wTDBKBggrBgEFBQcwAoY+aHR0
# cDovL3d3dy5taWNyb3NvZnQuY29tL3BraS9jZXJ0cy9NaWNUaW1TdGFQQ0FfMjAx
# MC0wNy0wMS5jcnQwDAYDVR0TAQH/BAIwADATBgNVHSUEDDAKBggrBgEFBQcDCDAN
# BgkqhkiG9w0BAQsFAAOCAQEACx/endmS5DW6xgb8fIdEqI963fUB7IoYlYNQU/YZ
# wq155uK1lwhcH5R1CaVMr+lyNIfD8l+lqy8mdou+Zwcrnzo3m2UEGO0uNFd4c8Ie
# w5Z49V+6AojT6z5IGJh3y56uDACQzRZrR+26uCx1nLsYjK/WtxQDq1IHHWeAxfrG
# xsAZO1BdQo25Mx34ZseViVj+usfmy0nUmfvZ0hFcMeNd4i4Kds03kY/CwWVZBw62
# tAjOHK/c81wO7hiutu9JX4MNjaEuFdheiNwmHyAmbpqYmz6K+9IPM75iXELbzjDc
# 6yLJpVOq17gfVDCaweryzgVnC2CIxq7gDGyTM9afwMtESTCCBnEwggRZoAMCAQIC
# CmEJgSoAAAAAAAIwDQYJKoZIhvcNAQELBQAwgYgxCzAJBgNVBAYTAlVTMRMwEQYD
# VQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRtb25kMR4wHAYDVQQKExVNaWNy
# b3NvZnQgQ29ycG9yYXRpb24xMjAwBgNVBAMTKU1pY3Jvc29mdCBSb290IENlcnRp
# ZmljYXRlIEF1dGhvcml0eSAyMDEwMB4XDTEwMDcwMTIxMzY1NVoXDTI1MDcwMTIx
# NDY1NVowfDELMAkGA1UEBhMCVVMxEzARBgNVBAgTCldhc2hpbmd0b24xEDAOBgNV
# BAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjEmMCQG
# A1UEAxMdTWljcm9zb2Z0IFRpbWUtU3RhbXAgUENBIDIwMTAwggEiMA0GCSqGSIb3
# DQEBAQUAA4IBDwAwggEKAoIBAQCpHQ28dxGKOiDs/BOX9fp/aZRrdFQQ1aUKAIKF
# ++18aEssX8XD5WHCdrc+Zitb8BVTJwQxH0EbGpUdzgkTjnxhMFmxMEQP8WCIhFRD
# DNdNuDgIs0Ldk6zWczBXJoKjRQ3Q6vVHgc2/JGAyWGBG8lhHhjKEHnRhZ5FfgVSx
# z5NMksHEpl3RYRNuKMYa+YaAu99h/EbBJx0kZxJyGiGKr0tkiVBisV39dx898Fd1
# rL2KQk1AUdEPnAY+Z3/1ZsADlkR+79BL/W7lmsqxqPJ6Kgox8NpOBpG2iAg16Hgc
# sOmZzTznL0S6p/TcZL2kAcEgCZN4zfy8wMlEXV4WnAEFTyJNAgMBAAGjggHmMIIB
# 4jAQBgkrBgEEAYI3FQEEAwIBADAdBgNVHQ4EFgQU1WM6XIoxkPNDe3xGG8UzaFqF
# bVUwGQYJKwYBBAGCNxQCBAweCgBTAHUAYgBDAEEwCwYDVR0PBAQDAgGGMA8GA1Ud
# EwEB/wQFMAMBAf8wHwYDVR0jBBgwFoAU1fZWy4/oolxiaNE9lJBb186aGMQwVgYD
# VR0fBE8wTTBLoEmgR4ZFaHR0cDovL2NybC5taWNyb3NvZnQuY29tL3BraS9jcmwv
# cHJvZHVjdHMvTWljUm9vQ2VyQXV0XzIwMTAtMDYtMjMuY3JsMFoGCCsGAQUFBwEB
# BE4wTDBKBggrBgEFBQcwAoY+aHR0cDovL3d3dy5taWNyb3NvZnQuY29tL3BraS9j
# ZXJ0cy9NaWNSb29DZXJBdXRfMjAxMC0wNi0yMy5jcnQwgaAGA1UdIAEB/wSBlTCB
# kjCBjwYJKwYBBAGCNy4DMIGBMD0GCCsGAQUFBwIBFjFodHRwOi8vd3d3Lm1pY3Jv
# c29mdC5jb20vUEtJL2RvY3MvQ1BTL2RlZmF1bHQuaHRtMEAGCCsGAQUFBwICMDQe
# MiAdAEwAZQBnAGEAbABfAFAAbwBsAGkAYwB5AF8AUwB0AGEAdABlAG0AZQBuAHQA
# LiAdMA0GCSqGSIb3DQEBCwUAA4ICAQAH5ohRDeLG4Jg/gXEDPZ2joSFvs+umzPUx
# vs8F4qn++ldtGTCzwsVmyWrf9efweL3HqJ4l4/m87WtUVwgrUYJEEvu5U4zM9GAS
# inbMQEBBm9xcF/9c+V4XNZgkVkt070IQyK+/f8Z/8jd9Wj8c8pl5SpFSAK84Dxf1
# L3mBZdmptWvkx872ynoAb0swRCQiPM/tA6WWj1kpvLb9BOFwnzJKJ/1Vry/+tuWO
# M7tiX5rbV0Dp8c6ZZpCM/2pif93FSguRJuI57BlKcWOdeyFtw5yjojz6f32WapB4
# pm3S4Zz5Hfw42JT0xqUKloakvZ4argRCg7i1gJsiOCC1JeVk7Pf0v35jWSUPei45
# V3aicaoGig+JFrphpxHLmtgOR5qAxdDNp9DvfYPw4TtxCd9ddJgiCGHasFAeb73x
# 4QDf5zEHpJM692VHeOj4qEir995yfmFrb3epgcunCaw5u+zGy9iCtHLNHfS4hQEe
# gPsbiSpUObJb2sgNVZl6h3M7COaYLeqN4DMuEin1wC9UJyH3yKxO2ii4sanblrKn
# QqLJzxlBTeCG+SqaoxFmMNO7dDJL32N79ZmKLxvHIa9Zta7cRDyXUHHXodLFVeNp
# 3lfB0d4wwP3M5k37Db9dT+mdHhk4L7zPWAUu7w2gUDXa7wknHNWzfjUeCLraNtvT
# X4/edIhJEqGCAsowggIzAgEBMIH4oYHQpIHNMIHKMQswCQYDVQQGEwJVUzELMAkG
# A1UECBMCV0ExEDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBD
# b3Jwb3JhdGlvbjEtMCsGA1UECxMkTWljcm9zb2Z0IElyZWxhbmQgT3BlcmF0aW9u
# cyBMaW1pdGVkMSYwJAYDVQQLEx1UaGFsZXMgVFNTIEVTTjpBMjQwLTRCODItMTMw
# RTElMCMGA1UEAxMcTWljcm9zb2Z0IFRpbWUtU3RhbXAgc2VydmljZaIjCgEBMAcG
# BSsOAwIaAxUAxnmkjOXedpqyHQqkJGn7ewhSC9GggYMwgYCkfjB8MQswCQYDVQQG
# EwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwG
# A1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMSYwJAYDVQQDEx1NaWNyb3NvZnQg
# VGltZS1TdGFtcCBQQ0EgMjAxMDANBgkqhkiG9w0BAQUFAAIFAOEvWvIwIhgPMjAx
# OTA5MjAyMjA0MzRaGA8yMDE5MDkyMTIyMDQzNFowczA5BgorBgEEAYRZCgQBMSsw
# KTAKAgUA4S9a8gIBADAGAgEAAgFRMAcCAQACAhFUMAoCBQDhMKxyAgEAMDYGCisG
# AQQBhFkKBAIxKDAmMAwGCisGAQQBhFkKAwKgCjAIAgEAAgMHoSChCjAIAgEAAgMB
# hqAwDQYJKoZIhvcNAQEFBQADgYEApA39XhxIaw1NSW9YOylaKsca4OejbgZDjkHi
# 0ZXXf05j1RJZWPXDTRZqsanCa/MFfSZ5ezPO30kN4sHY7FZVdN269vaL5Y4Em/aR
# h6EqtmfShvmaoE+u0SRyM5kiP7kXrDRD4KyuRJRTjWa7ysEiO7SsKrbpAvBKItqN
# YrJyIl4xggMNMIIDCQIBATCBkzB8MQswCQYDVQQGEwJVUzETMBEGA1UECBMKV2Fz
# aGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENv
# cnBvcmF0aW9uMSYwJAYDVQQDEx1NaWNyb3NvZnQgVGltZS1TdGFtcCBQQ0EgMjAx
# MAITMwAAAOCyGKnU0cK09wAAAAAA4DANBglghkgBZQMEAgEFAKCCAUowGgYJKoZI
# hvcNAQkDMQ0GCyqGSIb3DQEJEAEEMC8GCSqGSIb3DQEJBDEiBCB5Y+ATcrrqb4uk
# omS8/csgS23+sr32eOfAKnr1Q4bEODCB+gYLKoZIhvcNAQkQAi8xgeowgecwgeQw
# gb0EIKWBL1WkMyiyV3KDUZA9VWTnDA04P49yXZqgu9GsQl+QMIGYMIGApH4wfDEL
# MAkGA1UEBhMCVVMxEzARBgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1v
# bmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjEmMCQGA1UEAxMdTWlj
# cm9zb2Z0IFRpbWUtU3RhbXAgUENBIDIwMTACEzMAAADgship1NHCtPcAAAAAAOAw
# IgQgysx8LysGPohqEl50Ue9JBzArwyypNQeNxCqjni3rLKEwDQYJKoZIhvcNAQEL
# BQAEggEAGhZ3igDg0cxroQDRiTe/0qbTlsPAUibiX8KQvn4pxs3IFcQ1Cchmb1Oz
# KAx1AcBjqXXY+BcPnqVjnvKxac4NTNlNI7chBX7paroieAjRh87AHMpaMwuEfYUk
# lD9crhnh8c3YexKZLWLHA4Jj8VrjIkGoRdvJiP5833UONphAobkXxyX8rE2i+uPZ
# LN3/Zk1Ysjjpo0eNzwATo+r2Je2emJsdxE5aYSsvZRdzHCex01T3tCN8fg5n4vh6
# AK8+UKy0tCo3wu8kRw6vyP0W9J89NHikQshmw+v0ii5mNEE2plSrSasZbra0v6+b
# djCabej2xPx3+N/l4IiXDz+ompG1xg==
# SIG # End signature block
